MESSAGE(STATUS "${LightRed}NETLIST_FILE${ColourReset} = ${NETLIST_FILE}")
MESSAGE("")
MESSAGE("*********************")
MESSAGE("** KLESSYDRA CORES **")
MESSAGE("*********************")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_TEST${ColourReset} = ${USE_KLESSYDRA_TEST}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA${ColourReset} = ${USE_KLESSYDRA}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_T0_2TH${ColourReset} = ${USE_KLESSYDRA_T0_2TH}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_T0_3TH${ColourReset} = ${USE_KLESSYDRA_T0_3TH}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_T1_3TH${ColourReset} = ${USE_KLESSYDRA_T1_3TH}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_M${ColourReset} = ${USE_KLESSYDRA_M}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_S1${ColourReset} = ${USE_KLESSYDRA_S1}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_OoO${ColourReset} = ${USE_KLESSYDRA_OoO}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_F0_3TH${ColourReset} = ${USE_KLESSYDRA_F0_3TH}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_FT13${ColourReset} = ${USE_KLESSYDRA_FT13}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_dFT13${ColourReset} = ${USE_KLESSYDRA_dFT13}")
MESSAGE(STATUS "${LightGreen}USE_KLESSYDRA_NETLIST${ColourReset} = ${USE_KLESSYDRA_NETLIST}")
MESSAGE(STATUS "${LightGreen}USE_RI5CY${ColourReset} = ${USE_RI5CY}")
MESSAGE(STATUS "${LightGreen}USE_ZERO_RISCY${ColourReset} = ${USE_ZERO_RISCY}")
MESSAGE("")
MESSAGE("*************************")
MESSAGE("** RISCY CORES CONFIGS **")
MESSAGE("*************************")
MESSAGE(STATUS "${LightMagenta}RISCY_RV32F${ColourReset} = ${RISCY_RV32F}")
MESSAGE(STATUS "${LightMagenta}ZERO_RV32M${ColourReset} = ${ZERO_RV32M}")
MESSAGE(STATUS "${LightMagenta}ZERO_RV32E${ColourReset} = ${ZERO_RV32E}")
MESSAGE(STATUS "${LightMagenta}PL_NETLIST${ColourReset} = ${PL_NETLIST}")
MESSAGE("")
MESSAGE("********************")
MESSAGE("** MEMORY CONFIGS **")
MESSAGE("********************")
MESSAGE(STATUS "${LightCyan}INSTRRAM_SIZE${ColourReset} = ${INSTRRAM_SIZE}")
MESSAGE(STATUS "${LightCyan}INSTRRAM_ORG${ColourReset} = ${INSTRRAM_ORG}")
MESSAGE(STATUS "${LightCyan}GLOBALRAM_SIZE${ColourReset} = ${GLOBALRAM_SIZE}")
MESSAGE(STATUS "${LightCyan}GLOBALRAM_ORG${ColourReset} = ${GLOBALRAM_ORG}")
MESSAGE(STATUS "${LightCyan}ROM_SIZE${ColourReset} = ${ROM_SIZE}")
MESSAGE(STATUS "${LightCyan}ROM_ORG${ColourReset} = ${ROM_ORG}")
MESSAGE(STATUS "${LightCyan}HART_STACK_SIZE${ColourReset} = ${HART_STACK_SIZE}")
MESSAGE(STATUS "${LightCyan}STACK_SIZE${ColourReset} = ${STACK_SIZE}")
MESSAGE(STATUS "${LightCyan}STACK_ORG${ColourReset} = ${STACK_ORG}")
MESSAGE(STATUS "${LightCyan}STACK_END${ColourReset} = ${STACK_END}")
MESSAGE(STATUS "${LightCyan}PERIPHERALS${ColourReset} = ${PERIPHERALS}")
MESSAGE("")
MESSAGE("*****************************")
MESSAGE("** KLESSYDRA CORES CONFIGS **")
MESSAGE("*****************************")
MESSAGE(STATUS "${LightBlue}CONTEXT_SWITCH${ColourReset} = ${KLESS_CONTEXT_SWITCH}")
MESSAGE(STATUS "${LightBlue}THREAD_POOL_SIZE${ColourReset} = ${KLESS_THREAD_POOL_SIZE}")
MESSAGE(STATUS "${LightBlue}LUTRAM_RF${ColourReset} = ${KLESS_LUTRAM_RF}")
MESSAGE(STATUS "${LightBlue}LATCH_RF${ColourReset} = ${KLESS_LATCH_RF}")
MESSAGE(STATUS "${LightBlue}RV32E${ColourReset} = ${KLESS_RV32E}")
MESSAGE(STATUS "${LightBlue}RV32M${ColourReset} = ${KLESS_RV32M}")
MESSAGE(STATUS "${LightBlue}superscalar_exec_en${ColourReset} = ${KLESS_superscalar_exec_en}")
MESSAGE(STATUS "${LightBlue}KLESS_morph_en${ColourReset} = ${KLESS_morph_en}")
MESSAGE(STATUS "${LightBlue}KLESS_fetch_stage_en${ColourReset} = ${KLESS_fetch_stage_en}")
MESSAGE(STATUS "${LightBlue}KLESS_branch_predict_en${ColourReset} = ${KLESS_branch_predict_en}")
MESSAGE(STATUS "${LightBlue}KLESS_btb_en${ColourReset} = ${KLESS_btb_en}")
MESSAGE(STATUS "${LightBlue}KLESS_btb_len= ${KLESS_btb_len}${ColourReset}")
MESSAGE(STATUS "${LightBlue}MCYCLE_EN${ColourReset} = ${KLESS_MCYCLE_EN}")
MESSAGE(STATUS "${LightBlue}MINSTRET_EN${ColourReset} = ${KLESS_MINSTRET_EN}")
MESSAGE(STATUS "${LightBlue}MHPMCOUNTER_EN${ColourReset} = ${KLESS_MHPMCOUNTER_EN}")
MESSAGE(STATUS "${LightBlue}count_all${ColourReset} = ${KLESS_count_all}")
MESSAGE(STATUS "${LightBlue}debug_en${ColourReset} = ${KLESS_debug_en}")
MESSAGE(STATUS "${LightBlue}tracer_en${ColourReset} = ${KLESS_tracer_en}")
MESSAGE("")
MESSAGE("***********************************")
MESSAGE("** KLESSYDRA ACCELERATOR CONFIGS **")
MESSAGE("***********************************")
MESSAGE(STATUS "${LightYellow}accl_en${ColourReset} = ${KLESS_accl_en}")
MESSAGE(STATUS "${LightYellow}replicate_accl_en${ColourReset} = ${KLESS_replicate_accl_en}")
MESSAGE(STATUS "${LightYellow}multithreaded_accl_en${ColourReset} = ${KLESS_multithreaded_accl_en}")
MESSAGE(STATUS "${LightYellow}SPM_NUM${ColourReset} = ${KLESS_SPM_NUM}")
MESSAGE(STATUS "${LightYellow}Addr_Width${ColourReset} = ${KLESS_Addr_Width}")
MESSAGE(STATUS "${LightYellow}SIMD${ColourReset} = ${KLESS_SIMD}")
MESSAGE("")
MESSAGE("**************************")
MESSAGE("** Software Definitions **")
MESSAGE("**************************")
MESSAGE(STATUS " VGG16_libs=${VGG16_libs}")
MESSAGE(STATUS "${TIME}")
MESSAGE(STATUS "${VSIZE}")
MESSAGE(STATUS "${A_ORDER}")
MESSAGE(STATUS "${B_ORDER}")
MESSAGE(STATUS "${ITERATIONS}")
MESSAGE(STATUS "${KLESS_SPM_A}")
MESSAGE(STATUS "${KLESS_SPM_B}")
MESSAGE(STATUS "${KLESS_SPM_C}")
MESSAGE(STATUS "${KLESS_SPM_D}")
MESSAGE("")

# Format for RTL (replace '0x' with '16#' and append '#')
string(REPLACE "0x" "16#" RTL_INSTRRAM_ORG ${INSTRRAM_ORG})
set(RTL_INSTRRAM_ORG "${RTL_INSTRRAM_ORG}#")
string(REPLACE "0x" "16#" RTL_INSTRRAM_SIZE ${INSTRRAM_SIZE})
set(RTL_INSTRRAM_SIZE "${RTL_INSTRRAM_SIZE}#")

string(REPLACE "0x" "16#" RTL_GLOBALRAM_ORG ${GLOBALRAM_ORG})
set(RTL_GLOBALRAM_ORG "${RTL_GLOBALRAM_ORG}#")
string(REPLACE "0x" "16#" RTL_GLOBALRAM_SIZE ${GLOBALRAM_SIZE})
set(RTL_GLOBALRAM_SIZE "${RTL_GLOBALRAM_SIZE}#")

string(REPLACE "0x" "16#" RTL_ROM_ORG ${ROM_ORG})
set(RTL_ROM_ORG "${RTL_ROM_ORG}#")
string(REPLACE "0x" "16#" RTL_ROM_SIZE ${ROM_SIZE})
set(RTL_ROM_SIZE "${RTL_ROM_SIZE}#")

macro(add_sim_targets NAME)
  set(SETENV "env VSIM_DIR=${PULP_MODELSIM_DIRECTORY} \
  NETLIST_FILE=${NETLIST_FILE} \
  USE_KLESSYDRA_NETLIST=${USE_KLESSYDRA_NETLIST} \
  USE_KLESSYDRA_T1_3TH=${USE_KLESSYDRA_T1_3TH} \
  USE_KLESSYDRA_M=${USE_KLESSYDRA_M} \
  USE_KLESSYDRA_S1=${USE_KLESSYDRA_S1} \
  USE_KLESSYDRA_OoO=${USE_KLESSYDRA_OoO} \
  USE_KLESSYDRA_T0_2TH=${USE_KLESSYDRA_T0_2TH} \
  USE_KLESSYDRA_T0_3TH=${USE_KLESSYDRA_T0_3TH} \
  USE_KLESSYDRA_F0_3TH=${USE_KLESSYDRA_F0_3TH}  \
  USE_KLESSYDRA_FT13=${USE_KLESSYDRA_FT13}  \
  USE_KLESSYDRA_dFT13=${USE_KLESSYDRA_dFT13} \
  USE_ZERO_RISCY=${USE_ZERO_RISCY} \
  RISCY_RV32F=${RISCY_RV32F} \
  ZERO_RV32M=${ZERO_RV32M} \
  ZERO_RV32E=${ZERO_RV32E} \
  PL_NETLIST=${PL_NETLIST} \
  KLESS_CONTEXT_SWITCH=${KLESS_CONTEXT_SWITCH} \
  KLESS_THREAD_POOL_SIZE=${KLESS_THREAD_POOL_SIZE} \
  KLESS_LUTRAM_RF=${KLESS_LUTRAM_RF} \
  KLESS_LATCH_RF=${KLESS_LATCH_RF} \
  KLESS_RV32E=${KLESS_RV32E} \
  KLESS_RV32M=${KLESS_RV32M} \
  KLESS_superscalar_exec_en=${KLESS_superscalar_exec_en} \
  KLESS_morph_en=${KLESS_morph_en} \
  KLESS_fetch_stage_en=${KLESS_fetch_stage_en} \
  KLESS_branch_predict_en=${KLESS_branch_predict_en} \
  KLESS_btb_en=${KLESS_btb_en} \
  KLESS_btb_len=${KLESS_btb_len} \
  KLESS_accl_en=${KLESS_accl_en} \
  KLESS_replicate_accl_en=${KLESS_replicate_accl_en} \
  KLESS_multithreaded_accl_en=${KLESS_multithreaded_accl_en} \
  KLESS_SPM_NUM=${KLESS_SPM_NUM} \
  KLESS_Addr_Width=${KLESS_Addr_Width} \
  KLESS_SIMD=${KLESS_SIMD} \
  KLESS_MCYCLE_EN=${KLESS_MCYCLE_EN} \
  KLESS_MINSTRET_EN=${KLESS_MINSTRET_EN} \
  KLESS_MHPMCOUNTER_EN=${KLESS_MHPMCOUNTER_EN} \
  KLESS_count_all=${KLESS_count_all} \
  KLESS_debug_en=${KLESS_debug_en} \
  KLESS_tracer_en=${KLESS_tracer_en} \
  INSTRRAM_SIZE=${RTL_INSTRRAM_SIZE} \
  INSTRRAM_ORG=${RTL_INSTRRAM_ORG} \
  GLOBALRAM_SIZE=${RTL_GLOBALRAM_SIZE} \
  GLOBALRAM_ORG=${RTL_GLOBALRAM_ORG} \
  ROM_SIZE=${RTL_ROM_SIZE} \
  ROM_ORG=${RTL_ROM_ORG} \
  STACK_SIZE=${STACK_SIZE} \
  STACK_ORG=${STACK_ORG} \
  STACK_END=${STACK_END} \
  PERIPHERALS=${PERIPHERALS} \
  TB_TEST=\"$<TARGET_PROPERTY:${NAME}.elf,TB_TEST>\"")


  # generate s19 file
  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/${NAME}.s19
    COMMAND ${CMAKE_OBJCOPY} --srec-len 1 --output-target=srec $<TARGET_FILE:${NAME}.elf> ${NAME}.s19
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.elf)
  add_custom_target(${NAME}.s19.cmd ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/${NAME}.s19)

  # generate stripped binary as in good old common.mk
  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/${NAME}.bin
    COMMAND ${CMAKE_OBJCOPY} -R .debug_frame -R .comment -R .stack -R .heapsram -R .heapscm -R .scmlock -O binary $<TARGET_FILE:${NAME}.elf> ${NAME}.bin
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.elf)
  add_custom_target(${NAME}.bin.cmd ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/${NAME}.bin)

  ##############################################################################
  # link do_files, tcl_files, work and modelsim.ini from real modelsim
  # directory
  ##############################################################################

  add_custom_command(OUTPUT                                                            ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/modelsim.ini
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${PULP_MODELSIM_DIRECTORY}/modelsim.ini ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/modelsim.ini)

  add_custom_command(OUTPUT                                                            ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/work
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${PULP_MODELSIM_DIRECTORY}/work         ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/work)

  add_custom_command(OUTPUT                                                            ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/tcl_files
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${PULP_MODELSIM_DIRECTORY}/tcl_files    ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/tcl_files)

  add_custom_command(OUTPUT                                                            ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/waves
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${PULP_MODELSIM_DIRECTORY}/waves        ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/waves)

  add_custom_target(${NAME}.links ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/modelsim.ini
                                              ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/work
                                              ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/tcl_files
                                              ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/waves)


  ##############################################################################
  # Stimuli generation
  ##############################################################################

  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/slm_files/)
  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/slm_files/l2_ram.slm
    COMMAND ${UTILS_DIR}/s19toslm.py ../${NAME}.s19 ${INSTRRAM_SIZE} ${INSTRRAM_ORG} ${GLOBALRAM_SIZE} ${GLOBALRAM_ORG} ${STACK_SIZE}
    COMMAND ${CMAKE_COMMAND} -E touch l2_ram.slm
    WORKING_DIRECTORY ./${SUBDIR}/slm_files/
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/${NAME}.s19)
  add_custom_target(${NAME}.slm.cmd ALL
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/slm_files/l2_ram.slm)


  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/vectors/)
  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/vectors/stim.txt
#    COMMAND ${UTILS_DIR}/parse_s19.pl ./${NAME}.s19 > ./vectors/stim.txt
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/${NAME}.s19)
  add_custom_target(${NAME}.stim.txt ALL
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/vectors/stim.txt)

  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/stdout/)
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}/FS/)

  ##############################################################################
  # Run simulation
  ##############################################################################

  # run in modelsim with GUI
  add_custom_target(${NAME}.vsim
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/$<TARGET_PROPERTY:${NAME}.elf,TB>\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim"
    ${USES_TERMINAL})

  # run in modelsim in batch mode, output is only generated after simulation terminates
  add_custom_target(${NAME}.vsimc
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -c -64 -do 'source tcl_files/$<TARGET_PROPERTY:${NAME}.elf,TB>\\; run -a\\; exit\\;' >vsim.log"
    COMMAND tail -n +1 -- ./stdout/*
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim")

  # run in modelsim in batch mode, output is only generated after simulation terminates
  add_custom_target(${NAME}.vsimf
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -c -64 -do 'source tcl_files/$<TARGET_PROPERTY:${NAME}.elf,TB>\\; source tcl_files/run_netlist.tcl\\; exit\\;' >vsim.log"
    COMMAND tail -n +1 -- ./stdout/*
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim")

  # run in modelsim with GUI
  add_custom_target(${NAME}.vsim.spi
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_spi.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim"
    ${USES_TERMINAL})

  # run in modelsim with GUI
  add_custom_target(${NAME}.vsim.boot
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_boot.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim"
    ${USES_TERMINAL})

  #############################################################################
  # post synthesis
  #############################################################################
  # run in modelsim with GUI post synthesis
  add_custom_target(${NAME}.vsim.spi.ps
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_spi_ps.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim (post synthesis)"
    ${USES_TERMINAL})

  #############################################################################
  # post layout
  #############################################################################
  # run in modelsim with GUI post layout
  add_custom_target(${NAME}.vsim.spi.pl
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_spi_pl.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim (post layout)"
    ${USES_TERMINAL})

  # run in modelsim in console post layout
  add_custom_target(${NAME}.vsimc.spi.pl
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM} -c -64 -do 'source tcl_files/run_spi_pl.tcl\\; run -a\\; exit'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim (post layout)"
    ${USES_TERMINAL})

  # run in modelsim with GUI post layout
  add_custom_target(${NAME}.vsim.boot.pl
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_boot_pl.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim (post layout)"
    ${USES_TERMINAL})

  # run in modelsim with GUI scan chain testing
  add_custom_target(${NAME}.sc.pl
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_sc_pl.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    COMMENT "Running scan chain testing (post layout)"
    ${USES_TERMINAL})

  # run in modelsim in console post layout and dump vcd automatically
  add_custom_target(${NAME}.powerc
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -c -64 -do 'source tcl_files/run_power.tcl\\; run -a\\; exit'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim (post layout)"
    ${USES_TERMINAL})

  # run in modelsim with GUI post layout and dump vcd
  add_custom_target(${NAME}.power
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_power.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim (post layout)"
    ${USES_TERMINAL})

  #############################################################################
  # post synthesis
  #############################################################################

  # run in modelsim with GUI post layout
  add_custom_target(${NAME}.vsim.boot.ps
    COMMAND ${CMAKE_COMMAND} -E remove stdout/*
    COMMAND ${CMAKE_COMMAND} -E remove FS/*
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_boot_ps.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} in ModelSim (post synthesis)"
    ${USES_TERMINAL})

  # run in modelsim with GUI scan chain testing
  add_custom_target(${NAME}.sc.ps
    COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_sc_ps.tcl\\;'"
    WORKING_DIRECTORY ./${SUBDIR}
    COMMENT "Running scan chain testing (post synthesis)"
    ${USES_TERMINAL})

  # run in modelsim with GUI
  # add_custom_target(${NAME}.vsim.boot
  #   COMMAND ${CMAKE_COMMAND} -E remove stdout/*
  #   COMMAND ${CMAKE_COMMAND} -E remove FS/*
  #   COMMAND tcsh -c "${SETENV} ${VSIM}  -64 -do 'source tcl_files/run_boot.tcl\\;'"
  #   WORKING_DIRECTORY ./${SUBDIR}
  #   DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
  #   COMMENT "Running ${NAME} in ModelSim"
  #   ${USES_TERMINAL})



  #############################################################################
  # run on FPGA
  #############################################################################
  add_custom_target(${NAME}.fpga
    COMMAND ${UTILS_DIR}/run-on-fpga.sh ${NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR}
    DEPENDS ${NAME}.slm.cmd ${NAME}.stim.txt ${NAME}.links
    COMMENT "Running ${NAME} on FPGA"
    ${USES_TERMINAL})

  #############################################################################
  # testing targets
  #############################################################################
  add_test(NAME ${NAME}.test
    COMMAND tcsh -c "${SETENV} ${VSIM}  -c -64 -do 'source tcl_files/$<TARGET_PROPERTY:${NAME}.elf,TB>; run_and_exit;'"
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SUBDIR})

  ##############################################################################
  # Convenience
  ##############################################################################

  add_custom_target(${NAME}
    DEPENDS ${NAME}.stim.txt
    DEPENDS ${NAME}.slm.cmd
    DEPENDS ${NAME}.bin.cmd
    )


  ##############################################################################
  # Analyze simulation
  ##############################################################################

  add_custom_target(${NAME}.kcg
    COMMAND ${PULP_PC_ANALYZE} --rtl --input=trace_core_00.log --binary=${NAME}.elf
    COMMAND kcachegrind kcg.txt
    WORKING_DIRECTORY ./${SUBDIR})
endmacro()
